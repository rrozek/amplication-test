/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WorkerProfile as PrismaWorkerProfile } from "@prisma/client";

export class WorkerProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkerProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workerProfile.count(args);
  }

  async workerProfiles(
    args: Prisma.WorkerProfileFindManyArgs
  ): Promise<PrismaWorkerProfile[]> {
    return this.prisma.workerProfile.findMany(args);
  }
  async workerProfile(
    args: Prisma.WorkerProfileFindUniqueArgs
  ): Promise<PrismaWorkerProfile | null> {
    return this.prisma.workerProfile.findUnique(args);
  }
  async createWorkerProfile(
    args: Prisma.WorkerProfileCreateArgs
  ): Promise<PrismaWorkerProfile> {
    return this.prisma.workerProfile.create(args);
  }
  async updateWorkerProfile(
    args: Prisma.WorkerProfileUpdateArgs
  ): Promise<PrismaWorkerProfile> {
    return this.prisma.workerProfile.update(args);
  }
  async deleteWorkerProfile(
    args: Prisma.WorkerProfileDeleteArgs
  ): Promise<PrismaWorkerProfile> {
    return this.prisma.workerProfile.delete(args);
  }
}
