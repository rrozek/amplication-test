/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobPostingService } from "../jobPosting.service";
import { JobPostingCreateInput } from "./JobPostingCreateInput";
import { JobPosting } from "./JobPosting";
import { JobPostingFindManyArgs } from "./JobPostingFindManyArgs";
import { JobPostingWhereUniqueInput } from "./JobPostingWhereUniqueInput";
import { JobPostingUpdateInput } from "./JobPostingUpdateInput";

export class JobPostingControllerBase {
  constructor(protected readonly service: JobPostingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobPosting })
  async createJobPosting(
    @common.Body() data: JobPostingCreateInput
  ): Promise<JobPosting> {
    return await this.service.createJobPosting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobPosting] })
  @ApiNestedQuery(JobPostingFindManyArgs)
  async jobPostings(@common.Req() request: Request): Promise<JobPosting[]> {
    const args = plainToClass(JobPostingFindManyArgs, request.query);
    return this.service.jobPostings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobPosting(
    @common.Param() params: JobPostingWhereUniqueInput
  ): Promise<JobPosting | null> {
    const result = await this.service.jobPosting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobPosting(
    @common.Param() params: JobPostingWhereUniqueInput,
    @common.Body() data: JobPostingUpdateInput
  ): Promise<JobPosting | null> {
    try {
      return await this.service.updateJobPosting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobPosting(
    @common.Param() params: JobPostingWhereUniqueInput
  ): Promise<JobPosting | null> {
    try {
      return await this.service.deleteJobPosting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
