/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkerProfileSkillService } from "../workerProfileSkill.service";
import { WorkerProfileSkillCreateInput } from "./WorkerProfileSkillCreateInput";
import { WorkerProfileSkill } from "./WorkerProfileSkill";
import { WorkerProfileSkillFindManyArgs } from "./WorkerProfileSkillFindManyArgs";
import { WorkerProfileSkillWhereUniqueInput } from "./WorkerProfileSkillWhereUniqueInput";
import { WorkerProfileSkillUpdateInput } from "./WorkerProfileSkillUpdateInput";

export class WorkerProfileSkillControllerBase {
  constructor(protected readonly service: WorkerProfileSkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkerProfileSkill })
  async createWorkerProfileSkill(
    @common.Body() data: WorkerProfileSkillCreateInput
  ): Promise<WorkerProfileSkill> {
    return await this.service.createWorkerProfileSkill({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkerProfileSkill] })
  @ApiNestedQuery(WorkerProfileSkillFindManyArgs)
  async workerProfileSkills(
    @common.Req() request: Request
  ): Promise<WorkerProfileSkill[]> {
    const args = plainToClass(WorkerProfileSkillFindManyArgs, request.query);
    return this.service.workerProfileSkills({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workerProfileSkill(
    @common.Param() params: WorkerProfileSkillWhereUniqueInput
  ): Promise<WorkerProfileSkill | null> {
    const result = await this.service.workerProfileSkill({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkerProfileSkill(
    @common.Param() params: WorkerProfileSkillWhereUniqueInput,
    @common.Body() data: WorkerProfileSkillUpdateInput
  ): Promise<WorkerProfileSkill | null> {
    try {
      return await this.service.updateWorkerProfileSkill({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkerProfileSkill(
    @common.Param() params: WorkerProfileSkillWhereUniqueInput
  ): Promise<WorkerProfileSkill | null> {
    try {
      return await this.service.deleteWorkerProfileSkill({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
