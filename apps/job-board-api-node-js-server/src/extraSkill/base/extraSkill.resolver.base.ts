/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExtraSkill } from "./ExtraSkill";
import { ExtraSkillCountArgs } from "./ExtraSkillCountArgs";
import { ExtraSkillFindManyArgs } from "./ExtraSkillFindManyArgs";
import { ExtraSkillFindUniqueArgs } from "./ExtraSkillFindUniqueArgs";
import { DeleteExtraSkillArgs } from "./DeleteExtraSkillArgs";
import { ExtraSkillService } from "../extraSkill.service";
@graphql.Resolver(() => ExtraSkill)
export class ExtraSkillResolverBase {
  constructor(protected readonly service: ExtraSkillService) {}

  async _extraSkillsMeta(
    @graphql.Args() args: ExtraSkillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExtraSkill])
  async extraSkills(
    @graphql.Args() args: ExtraSkillFindManyArgs
  ): Promise<ExtraSkill[]> {
    return this.service.extraSkills(args);
  }

  @graphql.Query(() => ExtraSkill, { nullable: true })
  async extraSkill(
    @graphql.Args() args: ExtraSkillFindUniqueArgs
  ): Promise<ExtraSkill | null> {
    const result = await this.service.extraSkill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExtraSkill)
  async deleteExtraSkill(
    @graphql.Args() args: DeleteExtraSkillArgs
  ): Promise<ExtraSkill | null> {
    try {
      return await this.service.deleteExtraSkill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
