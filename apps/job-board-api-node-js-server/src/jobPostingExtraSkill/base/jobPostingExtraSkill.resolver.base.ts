/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobPostingExtraSkill } from "./JobPostingExtraSkill";
import { JobPostingExtraSkillCountArgs } from "./JobPostingExtraSkillCountArgs";
import { JobPostingExtraSkillFindManyArgs } from "./JobPostingExtraSkillFindManyArgs";
import { JobPostingExtraSkillFindUniqueArgs } from "./JobPostingExtraSkillFindUniqueArgs";
import { DeleteJobPostingExtraSkillArgs } from "./DeleteJobPostingExtraSkillArgs";
import { JobPostingExtraSkillService } from "../jobPostingExtraSkill.service";
@graphql.Resolver(() => JobPostingExtraSkill)
export class JobPostingExtraSkillResolverBase {
  constructor(protected readonly service: JobPostingExtraSkillService) {}

  async _jobPostingExtraSkillsMeta(
    @graphql.Args() args: JobPostingExtraSkillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPostingExtraSkill])
  async jobPostingExtraSkills(
    @graphql.Args() args: JobPostingExtraSkillFindManyArgs
  ): Promise<JobPostingExtraSkill[]> {
    return this.service.jobPostingExtraSkills(args);
  }

  @graphql.Query(() => JobPostingExtraSkill, { nullable: true })
  async jobPostingExtraSkill(
    @graphql.Args() args: JobPostingExtraSkillFindUniqueArgs
  ): Promise<JobPostingExtraSkill | null> {
    const result = await this.service.jobPostingExtraSkill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPostingExtraSkill)
  async deleteJobPostingExtraSkill(
    @graphql.Args() args: DeleteJobPostingExtraSkillArgs
  ): Promise<JobPostingExtraSkill | null> {
    try {
      return await this.service.deleteJobPostingExtraSkill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
