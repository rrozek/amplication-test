/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkerProfileExtraSkillService } from "../workerProfileExtraSkill.service";
import { WorkerProfileExtraSkillCreateInput } from "./WorkerProfileExtraSkillCreateInput";
import { WorkerProfileExtraSkill } from "./WorkerProfileExtraSkill";
import { WorkerProfileExtraSkillFindManyArgs } from "./WorkerProfileExtraSkillFindManyArgs";
import { WorkerProfileExtraSkillWhereUniqueInput } from "./WorkerProfileExtraSkillWhereUniqueInput";
import { WorkerProfileExtraSkillUpdateInput } from "./WorkerProfileExtraSkillUpdateInput";

export class WorkerProfileExtraSkillControllerBase {
  constructor(protected readonly service: WorkerProfileExtraSkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkerProfileExtraSkill })
  async createWorkerProfileExtraSkill(
    @common.Body() data: WorkerProfileExtraSkillCreateInput
  ): Promise<WorkerProfileExtraSkill> {
    return await this.service.createWorkerProfileExtraSkill({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkerProfileExtraSkill] })
  @ApiNestedQuery(WorkerProfileExtraSkillFindManyArgs)
  async workerProfileExtraSkills(
    @common.Req() request: Request
  ): Promise<WorkerProfileExtraSkill[]> {
    const args = plainToClass(
      WorkerProfileExtraSkillFindManyArgs,
      request.query
    );
    return this.service.workerProfileExtraSkills({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileExtraSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workerProfileExtraSkill(
    @common.Param() params: WorkerProfileExtraSkillWhereUniqueInput
  ): Promise<WorkerProfileExtraSkill | null> {
    const result = await this.service.workerProfileExtraSkill({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileExtraSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkerProfileExtraSkill(
    @common.Param() params: WorkerProfileExtraSkillWhereUniqueInput,
    @common.Body() data: WorkerProfileExtraSkillUpdateInput
  ): Promise<WorkerProfileExtraSkill | null> {
    try {
      return await this.service.updateWorkerProfileExtraSkill({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkerProfileExtraSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkerProfileExtraSkill(
    @common.Param() params: WorkerProfileExtraSkillWhereUniqueInput
  ): Promise<WorkerProfileExtraSkill | null> {
    try {
      return await this.service.deleteWorkerProfileExtraSkill({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
