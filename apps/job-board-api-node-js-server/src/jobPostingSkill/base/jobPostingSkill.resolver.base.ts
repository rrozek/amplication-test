/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobPostingSkill } from "./JobPostingSkill";
import { JobPostingSkillCountArgs } from "./JobPostingSkillCountArgs";
import { JobPostingSkillFindManyArgs } from "./JobPostingSkillFindManyArgs";
import { JobPostingSkillFindUniqueArgs } from "./JobPostingSkillFindUniqueArgs";
import { DeleteJobPostingSkillArgs } from "./DeleteJobPostingSkillArgs";
import { JobPostingSkillService } from "../jobPostingSkill.service";
@graphql.Resolver(() => JobPostingSkill)
export class JobPostingSkillResolverBase {
  constructor(protected readonly service: JobPostingSkillService) {}

  async _jobPostingSkillsMeta(
    @graphql.Args() args: JobPostingSkillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPostingSkill])
  async jobPostingSkills(
    @graphql.Args() args: JobPostingSkillFindManyArgs
  ): Promise<JobPostingSkill[]> {
    return this.service.jobPostingSkills(args);
  }

  @graphql.Query(() => JobPostingSkill, { nullable: true })
  async jobPostingSkill(
    @graphql.Args() args: JobPostingSkillFindUniqueArgs
  ): Promise<JobPostingSkill | null> {
    const result = await this.service.jobPostingSkill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPostingSkill)
  async deleteJobPostingSkill(
    @graphql.Args() args: DeleteJobPostingSkillArgs
  ): Promise<JobPostingSkill | null> {
    try {
      return await this.service.deleteJobPostingSkill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
