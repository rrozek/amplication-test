/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobPostingSkillService } from "../jobPostingSkill.service";
import { JobPostingSkillCreateInput } from "./JobPostingSkillCreateInput";
import { JobPostingSkill } from "./JobPostingSkill";
import { JobPostingSkillFindManyArgs } from "./JobPostingSkillFindManyArgs";
import { JobPostingSkillWhereUniqueInput } from "./JobPostingSkillWhereUniqueInput";
import { JobPostingSkillUpdateInput } from "./JobPostingSkillUpdateInput";

export class JobPostingSkillControllerBase {
  constructor(protected readonly service: JobPostingSkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobPostingSkill })
  async createJobPostingSkill(
    @common.Body() data: JobPostingSkillCreateInput
  ): Promise<JobPostingSkill> {
    return await this.service.createJobPostingSkill({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobPostingSkill] })
  @ApiNestedQuery(JobPostingSkillFindManyArgs)
  async jobPostingSkills(
    @common.Req() request: Request
  ): Promise<JobPostingSkill[]> {
    const args = plainToClass(JobPostingSkillFindManyArgs, request.query);
    return this.service.jobPostingSkills({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobPostingSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobPostingSkill(
    @common.Param() params: JobPostingSkillWhereUniqueInput
  ): Promise<JobPostingSkill | null> {
    const result = await this.service.jobPostingSkill({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobPostingSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobPostingSkill(
    @common.Param() params: JobPostingSkillWhereUniqueInput,
    @common.Body() data: JobPostingSkillUpdateInput
  ): Promise<JobPostingSkill | null> {
    try {
      return await this.service.updateJobPostingSkill({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobPostingSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobPostingSkill(
    @common.Param() params: JobPostingSkillWhereUniqueInput
  ): Promise<JobPostingSkill | null> {
    try {
      return await this.service.deleteJobPostingSkill({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
